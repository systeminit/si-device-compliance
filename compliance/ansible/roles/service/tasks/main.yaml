---
- name: Ensure compliance directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - "{{ COMPLIANCE_DIR }}"
    - "{{ LOGS_DIR }}"
    - "{{ RESULTS_DIR }}"
  
- name: Create compliance data collection script
  copy:
    dest: "{{ SERVICE_SCRIPT_PATH }}"
    owner: root
    group: root
    mode: '0755'
    content: |
      #!/usr/bin/env bash

      set -eo pipefail 
      
      TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      OUTPUT_FILE="{{ RESULTS_DIR }}/${TIMESTAMP}.json"
      USING_PASSWORD_MANAGER="{{ USING_PASSWORD_MANAGER }}"
      SCRIPT_VERSION="{{ SCRIPT_VERSION }}"
      SCRIPT_USER="{{ EMAIL_ADDRESS }}"
      SUBMISSION_TOKEN="${1:-unset}"

      # If the variable corresponds to a file path, read the token from the file provided.
      if [ -f "$SUBMISSION_TOKEN" ]; then
        SUBMISSION_TOKEN="$(cat "$SUBMISSION_TOKEN")"
      fi

      echo "----------------------------------------------------"

      # Collect hostname
      HOSTNAME="$(hostname)"
      echo "HOSTNAME found to be $HOSTNAME"

      # Looking output like: AMD Ryzen Threadripper PRO 5975WX 32-Cores, x86_64, 64
      LSCPU="$(lscpu --json | jq -r '[
        (.lscpu[] | select(.field == "Model name:") | .data),
        (.lscpu[] | select(.field == "Architecture:") | .data),
        (.lscpu[] | select(.field == "CPU(s):") | .data)
      ] | join(", ")')"
      echo "LSCPU found to be $LSCPU"

      # Looking output like: 1783e116-bf08-36b8-b28e-08bfb836b28d
      HARDWARE_UUID="$(dmidecode --type system | grep UUID | awk -F: '{ print $2 }' | tr -d '[:space:]')"
      echo "HARDWARE_UUID found to be $HARDWARE_UUID"

      # Looking output like: 1783e116-bf08-36b8-b28e-08bfb836b28d - Pro WS WRX80E-SAGE SE WIFI
      LSHW="$(lshw -json | jq -r "
        .children[] 
        | select(.description == \"Motherboard\") 
        | \"${HARDWARE_UUID} - \(.product)\"
      ")"
      echo "LSHW found to be $LSHW"

      SERIAL_NUMBER="$(lshw -json | jq -r '
        .children[] 
        | select(.description == "Motherboard") 
        | "\(.serial)"
      ')"
      echo "SERIAL_NUMBER found to be $SERIAL_NUMBER"

      # Looking output like: 
      DISKS="$(lsblk -J | jq '{
        drives: [
          .blockdevices[]
          | recurse(.children[]?)
          | select(.type == "crypt")
          | {
              name: (.name | ascii_upcase + ":"),
              encrypted: (.type == "crypt"),
              isBootVolume: (.children? // [] | any(.mountpoints? | contains(["/"]))),
              filevaultEnabled: (.type == "crypt")
            }
        ]
      }')"
      echo "DISKS found to be:"
      echo $DISKS | jq
      echo "[ must be ]"
      echo '{"name": "{{ ROOT_DISK_ENCRYPTED_PARTITION_BLK }}","encrypted": true,"isBootVolume": true,"filevaultEnabled": true}' | jq

      OS_NAME=$(grep '^NAME=' /etc/os-release | cut -d= -f2 | tr -d '"' || echo "UTD")
      echo "OS_NAME found to be $OS_NAME"

      OS_VERSION=$( (grep '^VERSION_ID=' /etc/os-release | cut -d= -f2 | tr -d '"' ) || echo "UTD")
      echo "OS_VERSION found to be $OS_VERSION"

      # Check screenlock policies
      REQUIRES_PASSWORD=$( (gsettings get org.gnome.desktop.screensaver lock-enabled ) || echo "false")
      echo "REQUIRES_PASSWORD found to be $REQUIRES_PASSWORD [ must be true ]"

      TIMEOUT=$( (gsettings get org.gnome.desktop.session idle-delay | awk '{ print $2 "000"}') || echo "0")
      echo "TIMEOUT found to be $TIMEOUT [ must be > 1800 ]"

      # Check password policy
      PASSWORD_MIN_LEN=$( (grep ^minlen /etc/security/pwquality.conf | awk -F= '{ print $2 }' | tr -d ' ') || echo "0")
      echo "PASSWORD_MIN_LEN found to be $PASSWORD_MIN_LEN [ must be > 12 ]"

      # Antivirus check
      ANTIVIRUS_ACTIVE=$(ps aux | grep '[c]lamd' > /dev/null && echo "true" || echo "false")
      echo "ANTIVIRUS_ACTIVE found to be $ANTIVIRUS_ACTIVE [ must be true ]"

      # Assemble JSON with the simple keys first
      cat <<EOF > $OUTPUT_FILE
        {
          "displayName": "$HOSTNAME",
          "uniqueId": "$LSHW",
          "externalUrl": "N/A",
          "collectedTimestamp": "$TIMESTAMP",
          "osName": "$OS_NAME",
          "osVersion": "$OS_VERSION",
          "hardwareUuid": "$HARDWARE_UUID",
          "serialNumber": "$SERIAL_NUMBER",
          "applications": [],
          "users": [],
          "browserExtensions": [],
          "systemScreenlockPolicies": [
            {
              "requiresPassword": $REQUIRES_PASSWORD,
              "screenSleepTimeoutMs": $TIMEOUT
            }
          ],
          "isManaged": false,
          "autoUpdatesEnabled": false,
          "owner": "$SCRIPT_USER",
          "passwordPolicy": {
              "minimumLengthRequirement": $PASSWORD_MIN_LEN
          },
          "isXProtectEnabled": $ANTIVIRUS_ACTIVE,
          "customProperties": {
              "lscpu": "$LSCPU",
              "lshw": "$LSHW",
              "antivirusActive": "$ANTIVIRUS_ACTIVE",
              "usingPasswordManager": "{{ USING_PASSWORD_MANAGER }}",
              "scriptVersion": "{{ SCRIPT_VERSION }}"
          }
        }
      EOF

      # Inject the more difficult object(s) separately
      mv "${OUTPUT_FILE}" "${OUTPUT_FILE}.tmp"
      jq --argjson disks "$DISKS" '.drives = $disks.drives' ${OUTPUT_FILE}.tmp > "${OUTPUT_FILE}"
      rm "${OUTPUT_FILE}.tmp"

      # Get the resources object for posting
      RESOURCES=$(cat ${OUTPUT_FILE} | jq -c)

      echo "----------------------------------------------------"
      echo "Submission data found to be:"
      echo "----------------------------------------------------"
      echo $RESOURCES | jq
      echo "----------------------------------------------------"

      # Submit the data to the compliance-submission API for injection into Vanta
      curl --location --request POST 'https://device-compliance.systeminit.com' \
        --header 'accept: application/json' \
        --header 'content-type: application/json' \
        --header "Authorization: Bearer $SUBMISSION_TOKEN" \
        --data-raw "$RESOURCES"

- name: Set up systemd timer for compliance data collection
  when: INSTALL_SYSTEMD_SERVICE
  block:
    - name: Create systemd service file for compliance data collection
      copy:
        dest: /etc/systemd/system/collect_compliance_data.service
        owner: root
        group: root
        mode: '0644'
        content: |
          [Unit]
          Description=Collect Compliance Data

          [Service]
          Type=oneshot
          ExecStart={{ SERVICE_SCRIPT_PATH }} {{ SUBMISSION_TOKEN }}
          StandardOutput=append:{{ LOGS_DIR }}/run.log
          StandardError=append:{{ LOGS_DIR }}/run.log
          User=root

    - name: Create systemd timer file for compliance data collection
      copy:
        owner: root
        group: root
        mode: '0644'
        dest: /etc/systemd/system/collect_compliance_data.timer
        content: |
          [Unit]
          Description=Timer to run compliance data collection 10 minutes after boot

          [Timer]
          OnBootSec=10min
          Unit=collect_compliance_data.service

          [Install]
          WantedBy=timers.target

    # Add a second timer just incase the machine is a 24/7 runner
    - name: Create systemd timer file for compliance data collection (monthly)
      copy:
        owner: root
        group: root
        mode: '0644'
        dest: /etc/systemd/system/collect_compliance_data_monthly.timer
        content: |
          [Unit]
          Description=Timer to run compliance data collection monthly

          [Timer]
          OnCalendar=monthly
          Unit=collect_compliance_data.service

          [Install]
          WantedBy=timers.target

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start compliance data collection timer
      systemd:
        name: collect_compliance_data.timer
        enabled: true
        state: started
